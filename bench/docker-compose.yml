services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: benchmark-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - benchmark_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Valkey service
  valkey:
    image: valkey/valkey:latest
    container_name: benchmark-valkey
    command: valkey-server /usr/local/etc/valkey/valkey.conf
    volumes:
      - ./valkey.conf:/usr/local/etc/valkey/valkey.conf
    ports:
      - "6380:6379"
    networks:
      - benchmark_network
    healthcheck:
      test: ["CMD", "valkey-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Server app to benchmark - Redis version
  server-redis:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: benchmark-server-redis
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RATE_LIMITER_TYPE=redis
      - RATE_LIMITER_POINTS=100
      - RATE_LIMITER_DURATION=60
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NUM_WORKERS=4
    ports:
      - "3000:3000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - benchmark_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Server app to benchmark - Valkey version
  server-valkey:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: benchmark-server-valkey
    environment:
      - NODE_ENV=production
      - PORT=3001
      - RATE_LIMITER_TYPE=valkey
      - RATE_LIMITER_POINTS=100
      - RATE_LIMITER_DURATION=60
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - NUM_WORKERS=4
    ports:
      - "3001:3000"
    depends_on:
      valkey:
        condition: service_healthy
    networks:
      - benchmark_network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Load testing client - light traffic
  loadtest-light:
    build:
      context: .
      dockerfile: Dockerfile.loadtest
    container_name: benchmark-loadtest-light
    command: node /app/src/loadtest/run.js
    environment:
      - TARGET_URL=http://server-redis:3000/api/light
      - RESULT_DIR=/app/results
      - REQUEST_TYPE=light
      - RUN_ID=${RUN_ID:-default}
    volumes:
      - ./results:/app/results
    networks:
      - benchmark_network
    depends_on:
      server-redis:
        condition: service_healthy
    profiles:
      - light
      - full

  # Load testing client - heavy traffic
  loadtest-heavy:
    build:
      context: .
      dockerfile: Dockerfile.loadtest
    container_name: benchmark-loadtest-heavy
    command: node /app/src/loadtest/run.js
    environment:
      - TARGET_URL=http://server-redis:3000/api/heavy
      - RESULT_DIR=/app/results
      - REQUEST_TYPE=heavy
      - RUN_ID=${RUN_ID:-default}
    volumes:
      - ./results:/app/results
    networks:
      - benchmark_network
    depends_on:
      server-redis:
        condition: service_healthy
    profiles:
      - heavy
      - full

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    ports:
      - "9090:9090"
    networks:
      - benchmark_network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    volumes:
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3100:3000"
    networks:
      - benchmark_network
    depends_on:
      - prometheus

  # Redis exporter for Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    networks:
      - benchmark_network
    depends_on:
      - redis
      - prometheus

networks:
  benchmark_network:
    name: benchmark_network
